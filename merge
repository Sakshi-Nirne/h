%%writefile merge_sort.cpp
#include<iostream>
#include<omp.h>

using namespace std;

void mergesort(int a[], int i, int j);
void merge(int a[], int i1, int i2, int j1, int j2);

void mergesort(int a[], int i, int j) {
    if (i < j) {
        int mid = (i + j) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergesort(a, i, mid);
            #pragma omp section
            mergesort(a, mid + 1, j);
        }
        merge(a, i, mid, mid + 1, j);
    }
}

void merge(int a[], int i1, int i2, int j1, int j2) {
    int temp[1000], i = i1, j = j1, k = 0;
    while (i <= i2 && j <= j2) temp[k++] = (a[i] < a[j]) ? a[i++] : a[j++];
    while (i <= i2) temp[k++] = a[i++];
    while (j <= j2) temp[k++] = a[j++];
    for (i = i1, j = 0; i <= j2; i++, j++) a[i] = temp[j];
}

int main() {
    int *a, n;
    double st, et, seqt, part;

    cout << "Enter total number of elements: ";
    cin >> n;
    a = new int[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) cin >> a[i];

    // Sequential algorithm
    st = omp_get_wtime();
    mergesort(a, 0, n - 1);
    et = omp_get_wtime();
    seqt = et - st;
    cout << "Sequential Time: " << seqt << endl;

    // Parallel algorithm
    st = omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        mergesort(a, 0, n - 1);
    }
    et = omp_get_wtime();
    part = et - st;
    cout << "Parallel Time: " << part << endl;

    cout << "Sorted array:";
    for (int i = 0; i < n; i++) cout << "\n" << a[i];

    delete[] a;
    return 0;
}
!g++ -fopenmp merge_sort.cpp -o merge_sort
!./merge_sort
